knitr::opts_chunk$set(echo = TRUE)
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
library(shiny)
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
shinyAppDir(
system.file("examples/06_tabsets", package = "shiny"),
options = list(
width = "100%", height = 550
)
)
library("leaflet")
install.packages("leaflet")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
fluidPage(
tabsetPanel(
tabPanel('server.R',
code('library(shiny)
shinyServer(function(input, output) {
output$plot=renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
})')),
tabPanel('ui.R',
code('
shinyUI(
fluidPage(
sidebarPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
),
mainPanel(
plotOutput("plot")
)
))
'))
)
)
knitr::opts_chunk$set(echo = TRUE)
install.packages("knitr")
shiny::runApp('~/GitHub/Spring2018-Project2-group-7/app')
install.packages("leaflet")
runApp('~/GitHub/Spring2018-Project2-group-7/app')
knitr::opts_chunk$set(echo = TRUE)
install.packages("shiny")
install.packages("shiny")
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
fluidPage(
tabsetPanel(
tabPanel('server.R',
code('library(shiny)
shinyServer(function(input, output) {
output$plot=renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
})')),
tabPanel('ui.R',
code('
shinyUI(
fluidPage(
sidebarPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
),
mainPanel(
plotOutput("plot")
)
))
'))
)
)
library(datasets)
library(datasets)
statedata=as.data.frame(state.x77)
plot(life.exp~inc, data=statedata)
colnames(statedata)=c("popu", "inc", "illit", "life.exp", "murder", "hs.grad", "frost", "area")  # rename the variable
plot(life.exp~inc, data=statedata)
cor(statedata[,"life.exp"], statedata[,"inc"])
plot(life.exp~inc, data=statedata,type="l")
plot(life.exp~inc, data=statedata,type="o")
plot(life.exp~inc, data=statedata,type="p")
cor(statedata[,"life.exp"], statedata[,"inc"])
plot(life.exp~inc, data=statedata, type="n")
text(life.exp~inc, data=statedata, state.abb)
plot(life.exp~inc, data=statedata, type="n")
text(life.exp~inc, data=statedata, state.abb)
model1=lm(life.exp~inc, data=statedata)
summary(model1)
plot(life.exp~inc, data=statedata,
xlab="Life Expectancy", ylab="Income")
abline(model1)
plot(life.exp~inc, data=statedata,
xlab="Life Expectancy", ylab="Income")
abline(model1)
library(MASS)
library(ISLR)
install.packages(ISLR)
install.packages("ISLR")
library("ISLR")
attach(Boston)
attach(Boston)
attach(Boston)
lm.fit=lm(medv ~ lstat+age)
attach(Boston)
lm.fit=lm(medv ~ lstat+age)
summary(lm.fit)
summary(lm(medv ~ lstat*age,data=Boston))
plot(lstat, medv, pch=16)
lm.fit=lm(medv~lstat)
anova(lm.fit ,lm.fit2)
lm.fit2=lm(medv ~ lstat+I(lstat^2))    # quadratic function
summary(lm.fit2)
lm.fit=lm(medv~lstat)
anova(lm.fit ,lm.fit2)
par(mfrow=c(2,2))
plot(lm.fit2)
attach(Carseats)
contrasts(ShelveLoc)
iris = read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data", sep = ",", header = FALSE)
names(iris) = c("sepal.length", "sepal.width", "petal.length", "petal.width", "iris.type")
### attach name to each column so that we can directly access each column by its name
attach(iris)
Y = iris.type == "Iris-setosa"
logistic.model = glm(Y ~ sepal.length + sepal.width, data=iris, family = binomial(), subset=train)
train = sample.int(nrow(iris), 100)
Y = iris.type == "Iris-setosa"
logistic.model
knitr::opts_chunk$set(echo = TRUE)
install.packages("shiny")
library(shiny)
fluidPage(
tabsetPanel(
tabPanel('server.R',
code('library(shiny)
shinyServer(function(input, output) {
output$plot=renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
})')),
tabPanel('ui.R',
code('
shinyUI(
fluidPage(
sidebarPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
),
mainPanel(
plotOutput("plot")
)
))
'))
)
)
if (!require("DT")) install.packages('DT')
if (!require("dtplyr")) install.packages('dtplyr')
if(!require("lubridate")) install.packages('lubridate')
library(dtplyr)
if (!require("dplyr")) install.packages('dplyr')
if(!require("lubridate")) install.packages('lubridate')
if(!require("lubridate")) install.packages('lubridate')
library(dtplyr)
library(dplyr)
if (!require("dtplyr")) install.packages('dtplyr')
if (!require("DT")) install.packages('DT')
library(DT)
if (!require("DT")) install.packages('DT')
if (!require("dtplyr")) install.packages('dtplyr')
if (!require("lubridate")) install.packages('lubridate')
library(dtplyr)
library(dplyr)
library(DT)
library(lubridate)
library(shiny)
runExample("01_hello")
mh2009=read.csv(file="../data/ManhattanHousing.csv")
datatable(sample_n(mh2009, 50))
mh2009=
mh2009%>%
filter(ZIP.CODE>0)%>%
mutate(region=as.character(ZIP.CODE))
mh2009
count.df=mh2009%>%
group_by(region)%>%
summarise(
value=n()
)
count.df=mh2009%>%
group_by(region)%>%
summarise(
value=n()
)
View(count.df)
if (!require("choroplethr")) install.packages("choroplethr")
library(devtools)
?devtools
if (!require("choroplethrZip"))
devtools::install_github('arilamstein/choroplethrZip@v1.5.0')
devtools::install_github('arilamstein/choroplethrZip@v1.5.0')
if (!require("
if (!require("ggplot2")) devtools::install_github("hadley/ggplot2")
if (!require("ggplot2")) devtools::install_github("hadley/ggplot2")
if (!require("ggmap")) devtools::install_github("dkahle/ggmap")
library(choroplethrZip)
zip_choropleth(count.df,
title       = "2009 Manhattan housing sales",
legend      = "Number of sales",
county_zoom = 36061)
library(ggmap)
library(dplyr)
mh2009.selgeo=
mh2009%>%
sample_n(10)%>%
select(starts_with("ADD"))%>%
mutate(ADDRESS_Ext=paste(ADDRESS, "New York, NY", sep=","))%>%   #Mutate adds new variables and preserves existing; transmute drops existing variables.
mutate_geocode(ADDRESS_Ext)
View(mh2009.selgeo)
View(mh2009)
library(ggmap)
ggmap(get_map("New York, New York",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
ggmap(get_map("New York",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
ggmap(get_map("New York",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
mh2009.use=
mh2009%>%
mutate(sale.month=month(as.Date(SALE.DATE, "%m/%d/%y")))%>%
mutate(sale.price=ifelse(SALE.PRICE==0, NA, SALE.PRICE))%>%
mutate(footage=ifelse(GROSS.SQUARE.FEET==0, NA, GROSS.SQUARE.FEET))%>%
mutate(unit.price=sale.price/footage)%>%
mutate(bldg.type=substr(BUILDING.CLASS.CATEGORY, 1, 2))%>%
filter(bldg.type %in% c("10", "13", "25", "28"))%>%
arrange(bldg.type)
View(mh2009.use)
save(mh2009.use, file="../output/mh2009use.RData")
man.nbhd=c("Central Harlem", "Chelsea and Clinton",
"East Harlem", "Gramercy Park and Murray Hill",
"Greenwich Village and Soho", "Lower Manhattan",
"Lower East Side", "Upper East Side", "Upper West Side",
"Inwood and Washington Heights")
zip.nbhd=list(1:length(man.nbhd))
View(mh2009)
zip.nbhd=list(1:length(man.nbhd))
View(zip.nbhd)
zip.nbhd[[1]]=c(10026, 10027, 10030, 10037, 10039)
zip.nbhd[[2]]=c(10001, 10011, 10018, 10019, 10020)
zip.nbhd[[3]]=c(10036, 10029, 10035)
zip.nbhd[[4]]=c(10010, 10016, 10017, 10022)
zip.nbhd[[5]]=c(10012, 10013, 10014)
zip.nbhd[[6]]=c(10004, 10005, 10006, 10007, 10038, 10280)
zip.nbhd[[7]]=c(10002, 10003, 10009)
zip.nbhd[[8]]=c(10021, 10028, 10044, 10065, 10075, 10128)
zip.nbhd[[9]]=c(10023, 10024, 10025)
zip.nbhd[[10]]=c(10031, 10032, 10033, 10034, 10040)
View(zip.nbhd)
zip.nbhd[[1]]
geocode("california")
runApp('~/GitHub/Spring2018-Project2-group-7/app/Project_7_US_Employment')
runApp('~/GitHub/Spr2017-proj2-grp11/app/ShinyApp-Proj2')
#Load the data for Google motion data
country<-read.csv("country_cleaned.csv")
runApp('~/GitHub/Spr2017-proj2-grp11/app/ShinyApp-Proj2')
## UI Function
?navbarPage
runApp('~/GitHub/Spr2017-proj2-grp11/app/ShinyApp-Proj2')
##### end subset
?tempfile
?jpeg
?map_pal
??map_pal
?graphics.off
runApp('~/GitHub/Spr2017-proj2-grp11/app/ShinyApp-Proj2')
?navbarPage
runApp('~/GitHub/Spr2017-proj2-grp11/app/ShinyApp-Proj2')
data <- read.csv("state_M2016.csv")
getwd()
setwd("C:/Users/Kevin Zhang/Documents/GitHub/Spring2018-Project2-group-7/data")
setwd("C:/Users/Kevin Zhang/Documents/GitHub/Spring2018-Project2-group-7/data")
data <- read.csv("state_M2016.csv")
View(data)
data$OCC_GROUP=="major"
[1:nrow(data)]data$OCC_GROUP=="major"
[1:nrow(data)][data$OCC_GROUP=="major"]
(1:nrow(data))[data$OCC_GROUP=="major"]
data$STATE=="Alabama"
(1:1000)[data$STATE=="Alabama"]
data.Alabama <- data[(1:1000)[data$STATE=="Alabama"],]
View(data.Alabama)
(1:nrow(data.Alabama))[data.Alabama$OCC_GROUP=="major"]
print(data.Alabama[(1:nrow(data.Alabama))[data.Alabama$OCC_GROUP=="major"],"OCC_TITLE"])
data.Alabama[(1:nrow(data.Alabama))[data.Alabama$OCC_GROUP=="major"],"OCC_TITLE"]
major <- data.Alabama[(1:nrow(data.Alabama))[data.Alabama$OCC_GROUP=="major"],"OCC_TITLE"]
major
data <- read.csv("state_M2016.csv")
data.Alabama <- data[(1:1000)[data$STATE=="Alabama"],]
major <- data.Alabama[(1:nrow(data.Alabama))[data.Alabama$OCC_GROUP=="major"],"OCC_TITLE"]
major
C(major)
major <- c(major)
major
data <- read.csv("state_M2016.csv",as.is = FALSE,header = TRUE)
data.Alabama <- data[(1:1000)[data$STATE=="Alabama"],]
major <- data.Alabama[(1:nrow(data.Alabama))[data.Alabama$OCC_GROUP=="major"],"OCC_TITLE"]
major <- c(major)
major
data <- read.csv("state_M2016.csv",as.is = FALSE,header = TRUE)
data.Alabama <- data[(1:1000)[data$STATE=="Alabama"],]
major <- data.Alabama[(1:nrow(data.Alabama))[data.Alabama$OCC_GROUP=="major"],"OCC_TITLE"]
major
major <- as.character(major)
major
View(data.Alabama)
runApp('~/GitHub/Spring2018-Project2-group-7/app/Project_7_US_Employment')
data <- read.csv("state_M2016.csv")
data.Alabama <- data[(1:1000)[data$STATE=="Alabama"],]
major <- data.Alabama[(1:nrow(data.Alabama))[data.Alabama$OCC_GROUP=="major"],"OCC_TITLE"]
major
data <- read.csv("state_M2016.csv")
data.Alabama <- data[(1:1000)[data$STATE=="Alabama"],]
major <- as.character(data.Alabama[(1:nrow(data.Alabama))[data.Alabama$OCC_GROUP=="major"],"OCC_TITLE"])
major
runApp('~/GitHub/Spring2018-Project2-group-7/app/Project_7_US_Employment')
runApp('~/GitHub/Spring2018-Project2-group-7/app/Project_7_US_Employment')
