# Plot density as points
ggplot(data = dat, aes(x = x, y = y)) +
geom_point(size = 3) +
theme_classic()
x <- rgamma(100000, shape = 2, rate = 1)
den <- density(x)
dat <- data.frame(x = den$x, y = den$y)
# Plot density as points
ggplot(data = dat, aes(x = x, y = y)) +
geom_point(size = 3) +
theme_classic()
knitr::opts_chunk$set(echo = TRUE)
?rbeta
x <- rbeta(100000, 1/2, 1/2)
den <- density(x)
dat <- data.frame(x = den$x, y = den$y)
# Plot density as points
ggplot(data = dat, aes(x = x, y = y)) +
geom_point(size = 3) +
theme_classic()
x <- rbeta(100000, 1/2, 1)
den <- density(x)
dat <- data.frame(x = den$x, y = den$y)
# Plot density as points
ggplot(data = dat, aes(x = x, y = y)) +
geom_point(size = 3) +
theme_classic()
x <- rbeta(100000, 1/2, 2)
den <- density(x)
dat <- data.frame(x = den$x, y = den$y)
# Plot density as points
ggplot(data = dat, aes(x = x, y = y)) +
geom_point(size = 3) +
theme_classic()
x <- rbeta(100000, 1, 1)
den <- density(x)
dat <- data.frame(x = den$x, y = den$y)
# Plot density as points
ggplot(data = dat, aes(x = x, y = y)) +
geom_point(size = 3) +
theme_classic()
x <- rbeta(100000, 1, 2)
den <- density(x)
dat <- data.frame(x = den$x, y = den$y)
# Plot density as points
ggplot(data = dat, aes(x = x, y = y)) +
geom_point(size = 3) +
theme_classic()
x <- rbeta(100000, 2, 2)
den <- density(x)
dat <- data.frame(x = den$x, y = den$y)
# Plot density as points
ggplot(data = dat, aes(x = x, y = y)) +
geom_point(size = 3) +
theme_classic()
x <- rbeta(100000, 25, 100)
den <- density(x)
dat <- data.frame(x = den$x, y = den$y)
# Plot density as points
ggplot(data = dat, aes(x = x, y = y)) +
geom_point(size = 3) +
theme_classic()
x <- rbeta(100000, 100, 25)
den <- density(x)
dat <- data.frame(x = den$x, y = den$y)
# Plot density as points
ggplot(data = dat, aes(x = x, y = y)) +
geom_point(size = 3) +
theme_classic()
?rgamma
knitr::opts_chunk$set(echo = TRUE)
?choose
choose(3,3)
choose(3,1)
choose(3,2)
prb <- c(0.00,0.19,0.19,0.17,0.14,0.11,0.09,0.06,0.04,0.01,0.00)
length(prb)
c <- 0
for (i in 1:11) {
c <- c + prb[i]*choose(5,3)*(((i-1)/10)^3)*(1-(i-1)/10)^2
}
func <- function(i){
a <- prb[i]*choose(5,3)*(((i-1)/10)^3)*(1-(i-1)/10)^2
return(a/c)
}
func(1)
?sapply
sapply(1:11, func)
prb <- rep(1/11, 11)
length(prb)
c <- 0
for (i in 1:11) {
c <- c + prb[i]*choose(5,3)*(((i-1)/10)^3)*(1-(i-1)/10)^2
}
func <- function(i){
a <- prb[i]*choose(5,3)*(((i-1)/10)^3)*(1-(i-1)/10)^2
return(a/c)
}
sapply(1:11, func)
prb <- c(0.00,0.19,0.19,0.17,0.14,0.11,0.09,0.06,0.04,0.01,0.00)
length(prb)
c <- 0
for (i in 1:11) {
c <- c + prb[i]*choose(5,3)*(((i-1)/10)^3)*(1-(i-1)/10)^2
}
func <- function(i){
a <- prb[i]*choose(5,3)*(((i-1)/10)^3)*(1-(i-1)/10)^2
return(round(a/c, 4))
}
sapply(1:11, func)
# load packages
library("rvest")
library("rvest")
shiny::runApp('Documents/GitHub/Spring2018-Project2-Group7/app')
runApp('Documents/GitHub/Spring2018-Project2-Group7/app')
scaled.data<-scale(data, center=TRUE, scale=FALSE)
# setwd("/Users/linxiliu/Documents/Teaching/Statistical_Machine_Learning_Spring2018/Tutorials/Week_2_pca")
### all images corresponding to digit "3"
zip.3<-read.table("train.3.txt", header=FALSE, sep=",")
zip.3<-as.matrix(zip.3)
### all images corresponding to digit "5"
zip.5<-read.table("train.5.txt", header=FALSE, sep=",")
zip.5<-as.matrix(zip.5)
### n.3 and n.5 are the total number of "3"s and "5"s, respectively.
n.3<-length(zip.3[,1])
n.5<-length(zip.5[,1])
### combine two data sets together
data<-rbind(zip.3, zip.5)
vector <- zip.3[1,]
output.image<-function(vector) {
digit<-matrix(vector, nrow=16, ncol=16)
#index= seq(from=1, to =16, by=1)
index= seq(from=16, to =1, by=-1)
sym_digit = digit[,index]
image(sym_digit, col= gray((8:0)/8), axes=FALSE)
}
par(mfrow=c(10,10),mai=c(0.1,0.1,0.1,0.1))
#par(mfrow=c(1,1),mai=c(0.1,0.1,0.1,0.1))
for(i in 1:100) {
#output.image(zip.5[i,])
output.image(zip.3[i,])
}
par(mfrow=c(1,1),mai=c(0.6,0.6,0.6,0.6))
mean.3<- apply(zip.3, 2, mean)
### visualize the mean ###
output.image(mean.3)
scaled.3<-scale(zip.3,center=TRUE, scale=FALSE)
pca<-svd(scaled.3)
par(mfrow=c(4,4), mai=c(0.1,0.1, 0.1, 0.1))
for(j in 1:16) {
output.image(pca$v[,j])
}
scaled.data<-scale(data, center=TRUE, scale=FALSE)
pca<-svd(scaled.data)
par(mfrow=c(1,1), mai=c(0.6, 0.6, 0.6, 0.6))
plot(pca$u[,1], pca$u[, 2],pch=16, xlab="First Principle Component", ylab="Second Principle Component" )
plot(pca$u[1:n.3, 1], pca$u[1:n.3, 2], pch="3", col="red", cex=0.8,xlim=c(-0.07, 0.07), ylim=c(-0.07, 0.07), xlab="First Principle Component", ylab="Second Principle Component")
points(pca$u[(n.3+1):(n.3+n.5), 1], pca$u[(n.3+1):(n.3+n.5), 2], cex=0.8,pch="5", col="blue")
plot(seq(from=1,to=256, by=1), (pca$d)^2/sum((pca$d)^2), xlab="Priciple componnets", ylab="Proportion of variance explained", pch=16)
km.out<- kmeans(data, 2, nstart=50)
### Visualize the centroids of each cluster ###
digit_centers<-km.out$centers
par(mfrow=c(1,2), mai=c(0.1,0.1,0.1,0.1))
for(i in 1:2) {
output.image(digit_centers[i,])
}
?pca
?svd
summary(pca)
pca$v
dim(pca$v)
pca<-svd(scaled.3[1])
pca$v
output.image(pca$v[,1])
output.image(pca$v[,])
output.image(pca$v[,1])
output.image(pca$v[,1])
pca<-svd(scaled.3)
output.image(pca$v[,1])
shiny::runApp('Documents/GitHub/Spring2018-Project2-Group7/app')
library("maps")
icons
runApp('Documents/GitHub/Spring2018-Project2-Group7/app')
runApp('Documents/GitHub/Spring2018-Project2-Group7/app')
?map
runApp('Documents/GitHub/Spring2018-Project2-Group7/app')
?addTiles
library("RColorBrewer")
tmp = data
tmp = merge(tmp,state.coordinate, by = "STATE", all.x=T)
tmp = subset(tmp,OCC_TITLE == as.character(input$major))
tmp = tmp[,c("ST","STATE","OCC_TITLE","OCC_GROUP","A_MEAN","lon","lat")]
tmp$A_MEAN = unfactor(tmp$A_MEAN)
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
#load the packages
# install.packages("varhandle")
library("varhandle")
library("leaflet")
library("shiny")
library("ggmap")
library("ggplot2")
library("maps")
library("RColorBrewer")
data <- read.csv("state_M2016.csv",header = TRUE,as.is = FALSE)
setwd("~/Documents/GitHub/Spring2018-Project2-Group7/app")
library("leaflet")
library("shiny")
library("ggmap")
library("ggplot2")
library("maps")
library("RColorBrewer")
data <- read.csv("state_M2016.csv",header = TRUE,as.is = FALSE)
state.coordinate <- read.csv("state_coordinate.csv",header = TRUE,as.is = FALSE)
server<- function(input, output){
##Introduction
output$blankspace = renderUI({
HTML("<br/><br/><br/><br/><br/><br/><br/><br/>")
})
output$text = renderUI({
HTML("<br/><br/><br/>Our project uses statistics provided by the Department of Labor <br/>
to help with future career choices")
})
## Part 2
## 2D map
output$usmap <- renderLeaflet({
## subset the data
#US = data.frame(Country = "US",longitude = -95.71289,latitude = 37.09024)
##### subset dataframe
tmp = data
tmp = merge(tmp,state.coordinate, by = "STATE", all.x=T)
tmp = subset(tmp,OCC_TITLE == as.character(input$major))
tmp = tmp[,c("ST","STATE","OCC_TITLE","OCC_GROUP","A_MEAN","lon","lat")]
tmp$A_MEAN = unfactor(tmp$A_MEAN)
######
# SetColor <- function(tmp) {
#   sapply(tmp$A_MEAN, function(wage) {
#     if(wage <= 30000) {
#       "lightgray"
#     } else if(wage <= 40000) {
#       "lightblue"
#     } else if(wage <= 50000) {
#       "blue"
#     } else if(wage <= 70000) {
#       "darkblue"
#     } else {
#       "black"
#     } })
# }
#
# icons <- awesomeIcons(
#   icon = 'ios-close',
#   iconColor = 'white',
#   library = 'ion',
#   markerColor = paste(SetColor(tmp))
# )
#
#
#
# Colors = c("lightgray","lightblue","blue","darkblue","black")
# Labels = c("<= 30000","<= 40000","<= 50000","<= 70000","> 70000")
#
# leaflet(tmp)%>%addProviderTiles("Esri.WorldStreetMap")%>%
#   addAwesomeMarkers(~lon, ~lat, icon=icons, label=~as.character(A_MEAN))%>%
#   setView(lng=-30,lat=28,zoom=2)%>%#put US in the centre
#   addLegend("topright", colors = Colors, labels = Labels,
#             title = "Wage Level<br/>From Low to High",
#             labFormat = labelFormat(prefix = "$"),
#             opacity = 1)
pal <- colorNumeric(palette="Blues", domain=tmp$)
mapStates = map("state", fill = TRUE, plot = FALSE)
leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
?addTiles
})
}
## subset the data
#US = data.frame(Country = "US",longitude = -95.71289,latitude = 37.09024)
##### subset dataframe
tmp = data
tmp = merge(tmp,state.coordinate, by = "STATE", all.x=T)
tmp = subset(tmp,OCC_TITLE == as.character(input$major))
tmp = tmp[,c("ST","STATE","OCC_TITLE","OCC_GROUP","A_MEAN","lon","lat")]
tmp$A_MEAN = unfactor(tmp$A_MEAN)
setwd("~/Documents/GitHub/Spring2018-Project2-Group7/app")
runApp()
pal <- colorNumeric(palette="Blues", domain=tmp$A_MEAN)
typeof(tmp$A_MEAN)
typeof(as.numeric(tmp$A_MEAN))
typeof(as.numeric(tmp$A_MEAN))
tmp$A_MEAN
## subset the data
#US = data.frame(Country = "US",longitude = -95.71289,latitude = 37.09024)
##### subset dataframe
tmp = data
tmp = merge(tmp,state.coordinate, by = "STATE", all.x=T)
tmp = subset(tmp,OCC_TITLE == as.character(input$major))
tmp = tmp[,c("ST","STATE","OCC_TITLE","OCC_GROUP","A_MEAN","lon","lat")]
tmp$A_MEAN
data
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("state_M2016.csv",header = TRUE,as.is = FALSE)
state.coordinate <- read.csv("state_coordinate.csv",header = TRUE,as.is = FALSE)
df = merge(tmp,state.coordinate, by = "STATE", all.x=T)
df
data <- read.csv("state_M2016.csv",header = TRUE,as.is = FALSE)
state.coordinate <- read.csv("state_coordinate.csv",header = TRUE,as.is = FALSE)
df = merge(tmp,state.coordinate, by = "STATE", all.x=T)
df = df[,c("ST","STATE","OCC_TITLE","OCC_GROUP","A_MEAN","lon","lat")]
df
state.coordinate
df = merge(data,state.coordinate, by = "STATE", all.x=T)
df = df[,c("ST","STATE","OCC_TITLE","OCC_GROUP","A_MEAN","lon","lat")]
df
data <- read.csv("state_M2016.csv",header = TRUE,stringsAsFactors = FALSE)
state.coordinate <- read.csv("state_coordinate.csv",header = TRUE,stringsAsFactors = FALSE)
df = merge(data,state.coordinate, by = "STATE", all.x=T)
df = df[,c("ST","STATE","OCC_TITLE","OCC_GROUP","A_MEAN","lon","lat")]
df
df$A_MEAN <- as.numeric(gsub(",", "", df$A_MEAN))
df
write.csv(df, "salary2016.csv")
data <- read.csv("salary2016",header = TRUE,stringsAsFactors =  = FALSE)
data <- read.csv("salary2016",header = TRUE,stringsAsFactors = FALSE)
data <- read.csv("salary2016.csv",header = TRUE,stringsAsFactors = FALSE)
data
head(data)
## subset the data
#US = data.frame(Country = "US",longitude = -95.71289,latitude = 37.09024)
##### subset dataframe
tmp = data
pal <- colorNumeric(palette="Blues", domain=tmp$A_MEAN)
tmp
head(tmp)
tmp = subset(tmp,OCC_TITLE == "Management Occupations"))
tmp = subset(tmp,OCC_TITLE == "Management Occupations")
## subset the data
#US = data.frame(Country = "US",longitude = -95.71289,latitude = 37.09024)
##### subset dataframe
tmp = data
tmp = subset(tmp,OCC_TITLE == "Management Occupations")
head(tmp)
pal <- colorNumeric(palette="Blues", domain=tmp$A_MEAN)
pal
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data.Alabama <- data[[data$STATE=="Alabama"],]
data.Alabama <- data[data$STATE=="Alabama",]
runApp()
data <- read.csv("salary2016.csv",header = TRUE,stringsAsFactors = FALSE)
data
data <- read.csv("salary2016.csv",header = TRUE,stringsAsFactors = FALSE)
data
data <- data[, c("ST","STATE","OCC_CODE","OCC_TITLE","OCC_GROUP","A_MEAN")]
data <- read.csv("state_M2016.csv",header = TRUE,stringsAsFactors = FALSE)
data <- read.csv("state_M2016.csv",header = TRUE,stringsAsFactors = FALSE)
data <- data[, c("ST","STATE","OCC_CODE","OCC_TITLE","OCC_GROUP","A_MEAN")]
data
data$A_MEAN <- as.numeric(gsub(",", "", data$A_MEAN))
data
data%>%
group_by(OCC_TITLE)
library(dplyr)
data%>%
group_by(OCC_TITLE)
major <- data[data$OCC_GROUP=="major",]
major
sum(is.na(major$A_MEAN))
occ_code_fac <- as.factor(data$OCC_CODE)
occ_code_unique <- levels(occ_code_fac)
occ_code_unique
first2 <- substr(data$OCC_CODE, 1, 3)
first2
first2 <- substr(data$OCC_CODE, 1, 2)
first2
length(data$ST=="AL")
data.Alabama$first2 <- substr(data.Alabama$OCC_CODE, 1, 2)
data <- read.csv("state_M2016.csv",header = TRUE,stringsAsFactors = FALSE)
data.Alabama <- data[data$STATE=="Alabama",]
major <- as.character(data.Alabama[data.Alabama$OCC_GROUP=="major","OCC_TITLE"])
data.Alabama$first2 <- substr(data.Alabama$OCC_CODE, 1, 2)
data.Alabama
return_detail_given_major <- function(major_str){
first2_code <- data.Alabama$first2
detail<-data.Alabama[data.Alabama$first2 == first2_code, "OCC_TITLE"]
return(unique(detail))
}
runApp()
runApp()
return_detail_given_major("Business and Financial Operations Occupations")
return_detail_given_major("Business and Financial Operations Occupations")
head(return_detail_given_major("Business and Financial Operations Occupations"))
data.Alabama
head(data.Alabama)
head(return_detail_given_major("Management Occupations"))
head(return_detail_given_major("Business and Financial Operations Occupations"))
return_detail_given_major <- function(major_str){
first2_code <- data.Alabama[data.Alabama$OCC_TITLE==major_str, "first2"]
detail<-data.Alabama[data.Alabama$first2 == first2_code, "OCC_TITLE"]
return(unique(detail))
}
head(return_detail_given_major("Business and Financial Operations Occupations"))
head(return_detail_given_major("Management Occupations"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data <- read.csv("state_M2016.csv",header = TRUE,stringsAsFactors = FALSE)
data.Alabama <- data[data$STATE=="Alabama",]
major <- as.character(data.Alabama[data.Alabama$OCC_GROUP=="major","OCC_TITLE"])
data.Alabama$first2 <- substr(data.Alabama$OCC_CODE, 1, 2)
major
sapply(majot, return_detail_given_major)
sapply(major, return_detail_given_major)
detail_list <- sapply(major, return_detail_given_major)
as.data.frame(detail_list)
try <- list("Europe" = c("Germany", "Spain"),
"North America" = c("Canada", "United States" = "USA"))
try
typeof(detail_list)
typeof(try)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?get
runApp()
runApp()
runApp()
runApp()
typeof("Please select an occupation")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
detail_list
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
mapStates = map("state", fill = TRUE, plot = FALSE)
mapStates
mapStates$names
tmp$STATE
runApp()
m<- leaflet() %>%
addProviderTiles("Stamen.TonerLite") %>%
setView(-73.983,40.7639,zoom = 13)
m
m<- leaflet() %>%
addProviderTiles("Stamen.TonerLite") %>%
setView(-73.983,40.7639,zoom = 1)
m
m<- leaflet() %>%
addProviderTiles("Stamen.TonerLite") %>%
setView(-73.983,40.7639,zoom = 3)
m
m<- leaflet() %>%
addProviderTiles("Stamen.TonerLite") %>%
setView(-73.983,40.7639,zoom = 3)
m
runApp()
runApp()
runApp()
runApp()
