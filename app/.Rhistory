for (i in 1:7){
integral <- integrate(fn,lower = 0,upper = i/2)
new <- 21*exp((integral$value)*(-1))*(i/2)
vec <- c(vec,new)
}
(sum(vec)+par.cpn)/price
#1
install.packages("quantmod")
library("quantmod")
install.packages("xts")
install.packages("xts")
install.packages("zoo")
library("quantmod")
library("xts")
install.packages("xts")
library("xts")
library("zoo")
library("xts")
library("quantmod")
install.packages("TTR")
install.packages("TTR")
library("TTR")
install.packages("TTR")
library("TTR")
library("quantmod")
library("zoo")
library("xts")
library("TTR")
library("quantmod")
stock.list <- c("MMM","AXP","AAPL","BA","CAT","CVX",
"CSCO","KO","DWDP","XOM","GE","GS",
"HD","IBM","INTC","JNJ","JPM","MCD",
"MRK","MSFT","NKE","PFE","PG","TRV",
"UNH","UTX","VZ","V","WMT","DIS")
data <- getSymbols("AAPL", auto.assign = F, from = "2017-01-01", to = "2018-01-01")
View(data)
setwd("C:/Users/Kevin Zhang/Documents/Data")
setwd("C:/Users/Kevin Zhang/Documents/Data")
### all images corresponding to digit "3"
zip.3<-read.table("train.3.txt", header=FALSE, sep=",")
zip.3
### all images corresponding to digit "3"
zip.3<-read.table("train.3.txt", header=FALSE, sep=",")
zip.3<-as.matrix(zip.3)
zip.3
### all images corresponding to digit "3"
zip.3<-read.table("train.3.txt", header=FALSE, sep=",")
View(zip.3)
zip.3<-as.matrix(zip.3)
View(zip.3)
### all images corresponding to digit "5"
zip.5<-read.table("train.5.txt", header=FALSE, sep=",")
zip.5<-as.matrix(zip.5)
### n.3 and n.5 are the total number of "3"s and "5"s, respectively.
n.3<-length(zip.3[,1])
n.5<-length(zip.5[,1])
### combine two data sets together
data<-rbind(zip.3, zip.5)
output.image<-function(vector) {
digit<-matrix(vector, nrow=16, ncol=16)
#index= seq(from=1, to =16, by=1)
index= seq(from=16, to =1, by=-1)
sym_digit = digit[,index]
image(sym_digit, col= gray((8:0)/8), axes=FALSE)
}
dim(zip.3)
install.packages("rmarkdown")
?awesomeIcons
shiny::runApp('GitHub/Spring2018-Project2-group-7/app')
library("leaflet")
runApp('GitHub/Spring2018-Project2-group-7/app')
library("varhandle")
library("gplots")
library("plyr")
library("dplyr")
library("reshape2")
library("geosphere")
library("threejs")
library("rworldmap")
library("leaflet")
library("rgeos")
library("raster")
library("DT")
library("ggplot2")
library("sp")
library("ggmap")
library("knitr")
library("rglwidget")
library("rgl")
library("maptools")
library("shiny")
library("googleVis")
library("plotly")
library("grid")
library("gtable")
library("treemap")
library("RColorBrewer")
library(shiny)
library("ggmap")
library("ggplot2")
runApp('GitHub/Spring2018-Project2-group-7/app')
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
#load the packages
library("varhandle")
library("gplots")
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
#load the packages
library("varhandle")
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
#load the packages
install.packages("varhandle")
runApp('GitHub/Spring2018-Project2-group-7/app')
shiny::runApp('GitHub/Spring2018-Project2-group-7/app')
library("varhandle")
library("gplots")
library("plyr")
library("dplyr")
library("reshape2")
library("geosphere")
library("threejs")
library("rworldmap")
library("leaflet")
library("rgeos")
library("raster")
library("DT")
library("ggplot2")
library("sp")
library("ggmap")
library("knitr")
library("rglwidget")
library("rgl")
library("maptools")
library("shiny")
library("googleVis")
library("plotly")
library("grid")
library("gtable")
library("treemap")
library("RColorBrewer")
library(shiny)
library("ggmap")
library("ggplot2")
library("varhandle")
library("gplots")
library("plyr")
library("dplyr")
library("reshape2")
library("geosphere")
library("threejs")
library("rworldmap")
library("leaflet")
library("rgeos")
library("raster")
library("DT")
library("ggplot2")
library("sp")
library("ggmap")
library("knitr")
library("rglwidget")
library("rgl")
library("maptools")
library("shiny")
library("googleVis")
library("plotly")
library("grid")
library("gtable")
library("treemap")
library("RColorBrewer")
library(shiny)
library("ggmap")
library("ggplot2")
runApp('GitHub/Spring2018-Project2-group-7/app')
## end 2D map
?leaflet
library("varhandle")
library("gplots")
library("plyr")
library("dplyr")
library("reshape2")
library("geosphere")
library("threejs")
library("rworldmap")
library("leaflet")
library("rgeos")
library("raster")
library("DT")
library("ggplot2")
library("sp")
library("ggmap")
library("knitr")
library("rglwidget")
library("rgl")
library("maptools")
library("shiny")
library("googleVis")
library("plotly")
library("grid")
library("gtable")
library("treemap")
library("RColorBrewer")
library(shiny)
library("ggmap")
library("ggplot2")
library("varhandle")
library("gplots")
library("plyr")
library("dplyr")
library("reshape2")
library("geosphere")
library("threejs")
library("rworldmap")
library("leaflet")
library("rgeos")
library("raster")
library("DT")
library("ggplot2")
library("sp")
library("ggmap")
library("knitr")
library("rglwidget")
library("rgl")
library("maptools")
library("shiny")
library("googleVis")
library("plotly")
library("grid")
library("gtable")
library("treemap")
library("RColorBrewer")
library(shiny)
library("ggmap")
library("ggplot2")
library("varhandle")
library("gplots")
library("plyr")
library("dplyr")
library("reshape2")
library("geosphere")
library("threejs")
library("rworldmap")
library("leaflet")
library("rgeos")
library("raster")
library("DT")
library("ggplot2")
library("sp")
library("ggmap")
library("knitr")
library("rglwidget")
library("rgl")
library("maptools")
library("shiny")
library("googleVis")
library("plotly")
library("grid")
library("gtable")
library("treemap")
library("RColorBrewer")
library(shiny)
library("ggmap")
library("ggplot2")
runApp('GitHub/Spring2018-Project2-group-7/app')
annualized.seasonally.gdp <- read.csv("Annualized_Seasonally_GDP.csv",header = TRUE)
getwd()
setwd("~/GitHub/Spring2018-Project2-group-7/app")
setwd("~/GitHub/Spring2018-Project2-group-7/app")
annualized.seasonally.gdp <- read.csv("Annualized_Seasonally_GDP.csv",header = TRUE)
View(annualized.seasonally.gdp)
gdp.aer <- read.csv("GDP_AER.csv",header = TRUE)
View(gdp.aer)
gdp.aer <- read.csv("GDP_AER_RPP.csv",header = TRUE)
gdp.aer.rpp <- read.csv("GDP_AER_RPP.csv",header = TRUE)
View(gdp.aer.rpp)
?observeEvent
??observeEvent
shiny::runApp()
runApp()
runApp()
View(gdp.aer.rpp)
gdp.aer.rpp <- read.csv("GDP_AER_RPP.csv",header = TRUE)
View(gdp.aer)
?renderPlot
View(gdp.aer)
runApp()
install.packages("plotly")
library("plotly")
runApp()
runApp()
runApp()
## Calculate distance between two locations given their lat and lng
complaints_within <- function(r,lng,lat){
return( noise[distCosine(c(lng,lat), noise[,c("lng","lat")]) <= r, ] )
}
## Calculate distance between two locations given their lat and lng
complaints_within <- function(r,lng,lat){
return( noise[distCosine(c(lng,lat), noise[,c("lng","lat")]) <= r, ] )
}
View(complaints_within)
View(gdp.aer.rpp)
ggplot(data=gdp.aer.rpp, aes(x=c(2,3,4), y=gdp.aer.rpp[1,2:4])) +
geom_line()+
geom_point()
View(gdp.aer)
ggplot(data = gdp.aer.rpp[1,1:3]) +
geom_line()
ggplot(data = as.vector(gdp.aer.rpp[1,1:3])) +
geom_line()
gdp.aer.rpp[1,1:3]
ggplot(data = gdp.aer.rpp[1,2:4]) +
geom_line()
ggplot(data = gdp.aer.rpp[1,2:4]) +
geom_line()
?data.frame
colnames(gdp) <- gdp.aer.rpp[,1]
gdp <- data.frame()
colnames(gdp) <- gdp.aer.rpp[,1]
transform.data.frame(gdp.aer.rpp)
gdp<-transform.data.frame(gdp.aer.rpp)
View(gdp)
?transform.data.frame
gdp<-t(gdp.aer.rpp)
View(gdp)
gdp<-t(gdp.aer.rpp)[2:4,]
View(gdp)
gdp<-t(gdp.aer.rpp)[1:4,]
ggplot(data = gdp) +
geom_line(mapping = aes(x = c(2014:2016), y = "Alabama"))
ggplot(data = gdp) +
geom_line(mapping=aes(x="Alabama"))
gdp<-as.data.frame(t(gdp.aer.rpp)[1:4,])
ggplot(data = gdp) +
geom_line(mapping=aes(x="Alabama"))+
xlab("Car class") + ylab("Frequency") + ggtitle("Bargraph")
ggplot(data = gdp) +
geom_line(mapping = aes(x = c(2014:2016), y = "Alabama"))
lines(2014:2016,gdp[,1])
lines(2014:2016,gdp[2:4,1])
colnames(gdp) <- gdp[1,]
gdp
ggplot(data[,1])+
geom_line()
geo_information <- revgeocode(c(-97.358112, 37.683829), output = "more")
geo_information
?revgeocode
geo_information
geo_information <- revgeocode(c(-97.358112, 37.683829), output = "locality")
geo_information <- revgeocode(c(-97.358112, 37.683829), output = "all")
geo_information
View(geo_information)
geo_information[["results"]][[1]]
geo_information[["results"]][[2]]
geo_information$address_components[[5]]$long_name
geo_information[["results"]][[2]]$address_components[[5]]$long_name
runApp()
runApp()
runApp()
runApp()
state.name <- "Kansas"
plot.df <- data.frame(year=2014:2016,gdp=df[,"state.name"])
plot.df <- data.frame(year=2014:2016,gdp=df[,state.name])
state.name <- as.character("Kansas")
plot.df <- data.frame(year=2014:2016,gdp=df[,state.name])
View(gdp)
gdp[1,]==state.name
data <- gdp[,gdp[1,]==state.name]
data <- gdp[2:4,gdp[1,]==state.name]
data <- as.numeric(gdp[2:4,gdp[1,]==state.name])
data
colnames(df) <- df[1,]
df <- as.data.frame(t(gdp.aer.rpp)[1:4,])
colnames(df) <- df[1,]
View(df)
df <- as.data.frame(t(gdp.aer.rpp)[1:4,])
View(df)
colnames(df) <- as.character(df[1,])
colnames(df) <- df[1,c(2:52)]
colnames(df) <- df[1,2:52]
colnames(df) <- df[1,1:51]
df <- as.data.frame(t(gdp.aer.rpp)[1:4,])
df <- as.data.frame(t(gdp.aer.rpp)[1:4,])
colnames(df) <- df[1,]
View(gdp.aer.rpp)
colnames(df) <- gdp.aer.rpp[,1]
runApp()
state.name <- "New York"
df <- as.data.frame(t(gdp.aer.rpp)[1:4,])
colnames(df) <- gdp.aer.rpp[,1]
plot.df <- data.frame(year=2014:2016,gdp=df[,state.name])
View(df)
df <- df[-1,]
View(df)
plot.df <- data.frame(year=2014:2016,gdp=df[,state.name])
View(plot.df)
plot_ly(x=plot.df$year,y=plot.df$gdp, type='line') %>%
layout(title="Time distribution in 24h",
xaxis=list(title="Hours",tickfont=list(size=9)),
yaxis=list(title="Complaints",tickfont=list(size=9)))
plot_ly(x=plot.df$year,y=plot.df$gdp, type='scatter') %>%
layout(title="Time distribution in 24h",
xaxis=list(title="Hours",tickfont=list(size=9)),
yaxis=list(title="Complaints",tickfont=list(size=9)))
plot_ly(x=plot.df$year,y=plot.df$gdp, type='scatter') %>%
layout(xaxis=list(title="Years",tickfont=list(size=9)),
yaxis=list(title="GDP",tickfont=list(size=9)))
plot_ly(x=plot.df$year,y=plot.df$gdp, type='scattergl') %>%
layout(xaxis=list(title="Years",tickfont=list(size=9)),
yaxis=list(title="GDP",tickfont=list(size=9)))
plot_ly(x=plot.df$year,y=plot.df$gdp, type='bar') %>%
layout(xaxis=list(title="Years",tickfont=list(size=9)),
yaxis=list(title="GDP",tickfont=list(size=9)))
plot_ly(x=plot.df$year,y=plot.df$gdp, type='line') %>%
layout(xaxis=list(title="Years",tickfont=list(size=9)),
yaxis=list(title="GDP",tickfont=list(size=9)))
plot_ly(x=plot.df$year,y=plot.df$gdp, type='scatter', mode = 'lines') %>%
layout(xaxis=list(title="Years",tickfont=list(size=9)),
yaxis=list(title="GDP",tickfont=list(size=9)))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
geo_information <- revgeocode(c(-81.5157535,	27.6648274), output = "all")
state_name <- geo_information[["results"]][[2]]$address_components[[5]]$long_name
runApp()
runApp()
runApp()
runApp()
runApp()
state_name <- "New York"
df <- as.data.frame(t(gdp.aer.rpp)[1:4,])
View(df)
colnames(df) <- gdp.aer.rpp[,1]
df <- df[-1,]
plot.df <- data.frame(year=2014:2016,gdp=df[,state_name])
View(plot.df)
plot_ly(x=plot.df$year,y=plot.df$gdp, type='scatter', mode = 'lines') %>%
layout(xaxis=list(title="Years",tickfont=list(size=9)),
yaxis=list(title="GDP",tickfont=list(size=9)))
output$click_gdp_trend<- renderPlotly({
df <- as.data.frame(t(gdp.aer.rpp)[1:4,])
colnames(df) <- gdp.aer.rpp[,1]
df <- df[-1,]
plot.df <- data.frame(year=2014:2016,gdp=df[,state_name])
plot_ly(x=plot.df$year,y=plot.df$gdp, type='scatter', mode = 'lines') %>%
layout(xaxis=list(title="Years",tickfont=list(size=9)),
yaxis=list(title="GDP",tickfont=list(size=9)))
})
renderPlotly({
df <- as.data.frame(t(gdp.aer.rpp)[1:4,])
colnames(df) <- gdp.aer.rpp[,1]
df <- df[-1,]
plot.df <- data.frame(year=2014:2016,gdp=df[,state_name])
plot_ly(x=plot.df$year,y=plot.df$gdp, type='scatter', mode = 'lines') %>%
layout(xaxis=list(title="Years",tickfont=list(size=9)),
yaxis=list(title="GDP",tickfont=list(size=9)))
})
tmp <-renderPlotly({
df <- as.data.frame(t(gdp.aer.rpp)[1:4,])
colnames(df) <- gdp.aer.rpp[,1]
df <- df[-1,]
plot.df <- data.frame(year=2014:2016,gdp=df[,state_name])
plot_ly(x=plot.df$year,y=plot.df$gdp, type='scatter', mode = 'lines') %>%
layout(xaxis=list(title="Years",tickfont=list(size=9)),
yaxis=list(title="GDP",tickfont=list(size=9)))
})
tmp
?renderPlotly
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
